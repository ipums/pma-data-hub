{
  "articles": [
    {
      "path": "about.html",
      "title": "About this blog",
      "author": [],
      "contents": "\n\nContents\nWhy a blog?\nTry out our code!\nVisit us on GitHub\n\nStatisitcal Software\n\nIPUMS PMA harmonizes the Performance Monitoring for Action\n(PMA) data series (it was formerly known as Performance Monitoring\nand Accountability 2020 - PMA2020). It provides an interactive web\ndissemination system for PMA data with variable documentation on\nthousands of harmonized variables on family planning, water and\nsanitation, and health. PMA is fielded by the Bill &\nMelinda Gates Foundation and Johns Hopkins University using streamlined\nand high-frequency data collection in 11 FP2020 pledging countries. Read more about the project\nhere.\nIPUMS PMA is just one of many IPUMS\ndata projects. IPUMS provides census and survey data from around the\nworld integrated across time and space. IPUMS integration and\ndocumentation makes it easy to study change, conduct comparative\nresearch, merge information across data types, and analyze individuals\nwithin family and community context. Data and services are available\nfree of charge.\nWhy a blog?\nAs the data available at IPUMS\nPMA continues to grow, we wanted a space to demonstrate the range\nways that PMA data can help address some of today’s most pressing\nwomen’s health concerns.\nYou’ll find blog posts showing how to use common statistical software\nto do things like:\ncompare PMA data across countries and survey years\nuse service delivery point data to contextualize outcomes for\nindividuals\nmerge PMA data to external spatial datasets\nexplore data related to water, hygiene, nutrition, and food\nsecurity\nTry out our code!\nIf you register\nfor a free IPUMS PMA user account, you’ll be able to download the\nsame data extracts we feature in our posts.\nVisit us on GitHub\nWhile it’s not necessary to visit our GitHub repository\nto access the code you’ll find on this blog, we hope that visitors will\nfeel encouraged to join a conversation, ask questions, or even post code\nof their own! You can also use the GitHub repository to download code\nfrom all of our posts in one step.\nTo submit a post of your own, please take a look at our Contributing Guide and Code of Conduct. By contributing to this\nproject, you agree to abide by the terms of each.\nIf you spot an error or a place where our code could be improved,\nplease consider opening an “issue” on our GitHub repository.\nStatisitcal Software\nCurrently, most of the code highlighted in our articles is written in\nR, a free and open-source program used by data analysts\naround the world. We’ve built the blog, itself, with an R package called\ndistill.\n\nNew to R? Not to worry! We’ll post tips and links to help you get going\nin the “R tips” menu above.\nExperienced R users will notice that we use tidyverse conventions\nwherever possible, making the tidyverse package library\nan important prerequisite if you want to try our code on your own. We\nrecommend the excellent, free introductory text R for Data Science for\nnewcomers to R and tidyverse, alike.\nStata users: we are also planning to develop Stata\ncode for each of our articles, which will be made available by a\ndesignated download button and in a “stata” folder on the GitHub\nrepository. However, the inline code you’ll find in our articles is\nlikely to remain in R.\n\n\n\n",
      "last_modified": "2022-07-01T14:04:10-05:00"
    },
    {
      "path": "blog-post-workflow.html",
      "title": "Blog post workflow",
      "description": "How to create or review a PMA Data Hub blog post\n",
      "author": [
        {
          "name": "Matt Gunther",
          "url": {}
        }
      ],
      "date": "02-02-2021",
      "contents": "\n\nContents\nAll users: first time\nsetup\nR, RStudio, and required\npackages\nInitialize your UMN\nGitHub account\nUsing UMN GitHub from\nRStudio\nThe PMA Data Hub\nRepository\n\nAuthors: Creating a new\npost\nCreate a new branch\nCreate a new folder in\n“_posts”\nPut your data in a “data”\nfolder!\nPush your post to\nGitHub\n\nEditors\nPull the\nauthor’s branch to your computer\nLocate and edit the new\npost\nPush the edited post\nback to GitHub\n\nAll users: making\nrevisions\nSite Admin\nSetup\nCreate a\nGit Hook to remove data from the public repo\nMerging\nOther git tips\n\n\nAll users: first time setup\nR, RStudio, and required\npackages\nTo get a copy of R, visit the Comprehensive R Archive Network\n(CRAN) and choose the right download link for your operating system.\nThe PMA Data Hub is organized as an RStudio\nProject, so you’ll also need to use RStudio (not\nbase R).\nNote: a copy of RStudio running R version 4.0.2 (or higher) lives\non the MPC gp1 server here. Members of the MPC GitHub\norganization can access an article specifically about using RStudio on\ngp1 (e.g. how to build a package library) here.\nWhen you’ve got RStudio set up, install these packages:\n\n\ninstall.packages(\"rmarkdown\")\ninstall.packages(\"knitr\")\ninstall.packages(\"distill\")\ninstall.packages(\"usethis\")\n\n\n\nTroubleshooting note: the package\nrmarkdown comes along with RStudio, but you may receive an\nolder version than we need to build the site. So, when you try\ninstall.packages(\"rmarkdown\"), you may get a message asking\nto restart R (avoiding a conflict with the prior version). We’ve\nfound that it’s best to reply ‘No’ to the restart prompt, wait for\nrmarkdown to install, and then re-launch RStudio. If you do choose\nto restart, you may experience a recursive loop of restart prompts!\nInitialize your UMN GitHub\naccount\nContributors to the PMA Data Hub will work on an internal copy of the\npublic site - it’s visible only to certain people affiliated with the\nMPC. A smaller team of Data Hub “admin” (currently Matt & postdocs)\nwill take care of migrating content from the private site to our public\nsite: we’re always here to help with formatting, editing, and version\ncontrol!\nSo what is UMN GitHub? GitHub, itself, is a company\nthat hosts projects on proprietary server: when you make a repository\n“public”, anyone in the world can visit your project on a GitHub server.\nGitHub also makes its underlying software available to institutions that\nwant to provide a similar service restricted to institutional\nmembers. In practice, UMN operates its own GitHub server where\norganizations like the MPC can host projects that are more private in\nscope.\nUMN GitHub is an instance of Enterprise\nGitHub, whereas the public version of our blog lives in a space that\nfolks sometimes call “public GitHub”. It’s common for people to have one\naccount for “public GitHub” and one account for their job associated\nwith an “enterprise GitHub”. To initialize an account for UMN\nGitHub, visit github.umn.edu and\nlog in with your University Internet ID and password.\nUsing UMN GitHub from\nRStudio\nFirst things first: you must install install Git on your computer if it isn’t there\nalready. Mac OS comes with git installed,1\nwhile other users should download the right Git for their\noperation system. If you’re using RStudio on the gp1 server, Git is\nalready installed.\nNext, open the Global Options menu in RStudio and locate\nthe Git/SVN tab. Ensure that the box shown below is checked, and then\nenter the location of the executable file2 for\nyour Git installation:\n\n\nknitr::include_graphics(\"images/bpw/git-menu.png\")\n\n\n\n\nLastly, you should provide Git with a username, email, and Personal\nAccess Token (PAT) for your UMN GitHub account. If you’ve installed usethis\nas shown above, you’ll be\nable to set these up with R commands (changes will be applied to\nglobally wherever you use Git on your operating system). First, set the\nusername and email address for your UMN GitHub account. For example,\nmine are:\nWhy a PAT? GitHub plans to deprecate password authentication in\nthe near future. You could use one for now (like the example below), but\nyou’ll need a PAT soon!\n\n\ngert::git_config_global_set(\"user.name\", \"Matt Gunther\")\ngert::git_config_global_set(\"user.email\", \"mgunther@umn.edu\")\n\n\n\nThen, create a PAT for your account with:\n\n\nusethis::create_github_token(host = \"https://github.umn.edu\")\n\n\n\nYour browser will open to a webpage. Check all the boxes you\nsee, then click the green Generate Token button.\nOn the next page, notice the very long string shown in the green box:\nthis is your PAT. Don’t close this page yet!. Return to R and\ncall:\n\n\ngitcreds::gitcreds_set(\"https://github.umn.edu\")\n\n\n\nYou’ll be asked to enter a new password or token: copy and paste your\nPAT from your browser and press Enter. From now on, RStudio and Git will\nbe able to access your UMN GitHub account automatically! (If you have a\npersonal GitHub account at github.com, you could repeat this process\nsubstituting https://github.com for\nhttps://github.umn.edu, and Git will automatically choose\nthe right credentials based on the repository associated with your\nproject).\nThe PMA Data Hub Repository\nOpen RStudio and navigate to File > New Project, then\nselect Version Control:\n\n\nknitr::include_graphics(\"images/bpw/version_control.png\")\n\n\n\n\nChoose Git to clone our project from a GitHub\nrepository:\n\n\nknitr::include_graphics(\"images/bpw/use_git.png\")\n\n\n\n\nOn the next menu page, enter the address for the enterprise\nrepository exactly as shown (do not clone the public repository):\nhttps://github.umn.edu/mpc/pma-data-hub/\nAlso enter the project directory name “pma-data-hub” as shown:\npma-data-hub\nIn the third field, choose a location where you would like to save\nthis file on your computer (mine was “~/R” - insert your own\npath, instead). Finally, click Create Project.\n\nWhen choosing a place to save this project, do not save to a network\ndrive. This seems to cause RStudio to crash!\n\n\nknitr::include_graphics(\"images/bpw/clone_info.png\")\n\n\n\n\nIf you have not configured Git to automatically use your UMN GitHub\ncredentials with the steps\nshown above, you may be prompted to provide them in a pop-up\nwindow:\n\n\nknitr::include_graphics(\"images/bpw/username.png\")\n\n\n\nknitr::include_graphics(\"images/bpw/password.png\")\n\n\n\n\n\nUntil you configure Git with these credentials, you’ll have to do this\nevery time you interact with GitHub. Additionally, password\nauthentication for GitHub will be deprecated in the near future so\nyou’ll need to do it soon!\nAfter a short bit, RStudio will relaunch and open the new project. If\nyou adjust the windows to show the tabs Git (left) and\nFiles (right), you should see something like this:\n\n\nknitr::include_graphics(\"images/bpw/clone_success.png\")\n\n\n\n\nYou have now downloaded a copy of the Enterprise repository to your\ncomputer!\nMoreover, because you’ve connected these files to a GitHub\nrepository, the RStudio Project will now keep track of changes you make\nto the files in this folder, and it will prompt you to upload your\nchanges back to GitHub: as you add, edit, or delete files, a list of\nchanges will appear in the Git tab.\n\nTo open an RStudio project, click on the file pma-data-hub.Rproj.\nIf you ever forget, RStudio won’t know to look for a Git history\nassociated with all of the underlying files.\nNotice the word master shown in the Git tab\n- this shows that any changes we make to files will be recorded in our\nlocal copy of the “master” version of the repository. If we made changes\nhere and then pushed them to GitHub, they would be reflected on\nthe “master” version we’ve saved there, too.\nIn general, Matt and postdocs will be responsible for merging\nfinished blog posts to the master branch and deploying its contents to\nthe “live” blog that’s seen by users (for details, see site admin instructions below). All other\ncontributors should create their own branch when writing a new blog\npost; Matt or postdocs will merge them to “master” after\nthey’ve been reviewed and approved by an editor. Read on!\nAuthors: Creating a new post\nCreate a new branch\nNotice that the Git tab in RStudio has a purple\nicon:\n\n\nknitr::include_graphics(\"images/bpw/new_branch.png\")\n\n\n\n\nClick this icon to create a new branch. You can name it anything you\nlike, but we recommend using your URL slug if possible\n(e.g. “blog-post-workflow” is the end of the URL for this webpage).\nLeave the box next to “Sync branch with remote”\nchecked, as this will create your branch both locally\nand on our GitHub page:\n\n\nknitr::include_graphics(\"images/bpw/branch_name.png\")\n\n\n\n\nRStudio now displays the new branch in place of “master” to show that\nwe’re working on the new branch, instead!\nCreate a new folder in\n“_posts”\nNow that you’ve created a new branch in the Git window,\ntake a look at the File window.\n\n\nknitr::include_graphics(\"images/bpw/file_window1.png\")\n\n\n\n\nThe program we use to build the blog is called Distill, and it takes care\nof all the back-end work as long as we put every new blog post inside of\na unique folder within the “_posts” directory. Opening “_posts”, you can\nsee that every post is contained within a time-stamped sub-folder:\n\n\nknitr::include_graphics(\"images/bpw/posts_list.png\")\n\n\n\n\nTo create one of these folders for your new post, enter the following\ncommand into R:\n\n\ndistill::create_post(\"Blog post workflow\")\n\n\n\nThis does two things: it creates the folder automatically (circled in\nred), and it opens a new RMarkdown file where you can begin writing your\npost (circled in green).\n\n\nknitr::include_graphics(\"images/bpw/post_added.png\")\n\n\n\n\nIn red: notice the folder appears in both your File tab and\nyour Git tab. (Don’t worry about the date on this folder - it’s\nfor internal use and does not need to match the publication date.)\nIn green: this is the RMarkdown file where you’ll write your post.\nCheck out our Quick-start\nGuide for Blogging with RMarkdown!\nAs you’re writing your post, you can preview it as a fully formatted\nwebpage by hitting the Knit button at the top of your\nRMarkdown file:\n\n\nknitr::include_graphics(\"images/bpw/knit.png\")\n\n\n\n\n\nYou can switch between previewing the page in the RStudio Viewer tab, or\nin your computer’s default web browser. Click the settings icon next to\n“Knit” for preview options.\nPut your data in a “data”\nfolder!\nIf you’re working with a PMA data extract in your post put it\nin a sub-folder called data. Your editors will\nneed a copy of your extract in order to render your post! For example, I\nwould store the data and the ddi for this post like this:\n./_posts/2021-02-02-blog-post-workflow/data/pma_00008.dat.gz\n./_posts/2021-02-02-blog-post-workflow/data/pma_00008.xml\nIt’s OK to push your data to UMN Github! As long as you put it in a\nfolder called data, admin will automatically remove it\nbefore posting the public version of the blog.\nPush your post to GitHub\nWhen you’re finished writing, follow these steps to share your post\nwith the team on our Enterprise GitHub page (reminder: it won’t go\n“live” until Matt or postdocs merge your post to master and\npublishes it to the public GitHub page).\nPress the “Knit” button one more time to render a final HTML\nversion of the page. (At this point, you may see a number of\nautomatically created files related to your RMarkdown file in the\nGit tab.)\nNow, enter the following commands directly into the R console,\nbut please adjust the brief commit “message” as necessary to\ndescribe your change!\n\n\ngert::git_add(\".\")\ngert::git_commit(\"Draft published: blog-post-workflow\")\ngert::git_push()\n\n\n\nNow, if you visit our Enterprise GitHub page, your post will appear\nin a new branch! (It will not yet appear on the copy of the blog we have\nposted there, which is rendered only from master.)\n\n\nknitr::include_graphics(\"images/bpw/see_branches.png\")\n\n\n\n\nEditors\nPull the author’s\nbranch to your computer\nAny time that you want to review an author’s post, you’ll always need\nto get the latest copy of their branch from our Enterprise GitHub page.\nIf this is the first time you’ve read a draft for the post, the author’s\nbranch won’t yet be listed in RStudio.\n\n\nknitr::include_graphics(\"images/bpw/master_only.png\")\n\n\n\n\n\nThis editor’s RStudio only knows about the “master” branch so far.\nThe Pull button in RStudio’s Git tab will\ngather information about all of the new branches on GitHub, and it will\ndownload a copy of each one onto your computer:\n\n\nknitr::include_graphics(\"images/bpw/pull_button.png\")\n\n\n\n\nClicking it will bring up a dialogue screen. RStudio reports that it\ndiscovered a new branch blog-post-workflow living at the\nremote repository origin.\n\n\nknitr::include_graphics(\"images/bpw/pull_new_branch.png\")\n\n\n\n\nReturning to RStudio’s main window, notice that you can now toggle\nbetween the working on the remote master branch, or the new\nremote branch called blog-post-workflow. When you’re ready\nto edit the author’s post, use this menu to select their branch.\n\n\nknitr::include_graphics(\"images/bpw/toggle_branches.png\")\n\n\n\n\nRStudio automatically creates a local version of this branch on your\ncomputer, and it reports that your changes will be tracked and pushed to\nthe remote branch of the same name.\n\n\nknitr::include_graphics(\"images/bpw/new_local_branch.png\")\n\n\n\n\nLocate and edit the new post\nNow, RStudio shows that you’re working on the author’s branch in the\nGit tab, and you’ll see their post listed in the\n_posts folder on the Files tab. Navigate to\nthe .Rmd file for their post, then click it to begin making\nedits.\n\n\nknitr::include_graphics(\"images/bpw/author_post_appears.png\")\n\n\n\n\nCheck out our Quick-start\nGuide for Blogging with RMarkdown!\nAs you’re writing your post, you can preview it as a fully formatted\nwebpage by hitting the Knit button at the top of your\nRMarkdown file:\n\n\nknitr::include_graphics(\"images/bpw/edit_knit.png\")\n\n\n\n\n\nYou can switch between previewing the page in the RStudio Viewer tab, or\nin your computer’s default web browser. Click the settings icon next to\n“Knit” for preview options.\nPush the edited post back\nto GitHub\nWhen you’re finished editing, follow these steps to send the revised\nfile back to GitHub. (Reminder: it won’t appear on the website until\nMatt or postdocs merge the post to master and publishes it\nto the public GitHub page).\nPress the “Knit” button one more time to render a final HTML\nversion of the page. (At this point, you may see a number of\nautomatically created files related to your RMarkdown file in the\nGit tab.)\nNow, enter the following commands directly into the R console,\nbut please adjust the brief commit “message” as necessary to\ndescribe your change!\n\n\ngert::git_add(\".\")\ngert::git_commit(\"Draft edited: blog-post-workflow\")\ngert::git_push()\n\n\n\nNow, if you visit our Enterprise GitHub page, you’ll see that your\nedited files appear on the author’s branch. (They will not yet appear on\nthe copy of the blog we have posted there, which is rendered only from\nmaster.)\n\n\nknitr::include_graphics(\"images/bpw/draft_accepted.png\")\n\n\n\n\nAll users: making revisions\nWhen you’ve finished pushing something to GitHub, please\nemail your collaborators to let them know about next steps!\nTo get your collaborator’s latest updates from GitHub, you\nshould launch the pma-data-hub RStudio project file called\npma-data-hub.Rproj. If you forget to open the project file,\nRStudio will not be able to access the contents of your Git folder (it\nwon’t know that there’s a GitHub repository for the project at all).\nWhen you open the project file, RStudio will again display a\nGit tab. Click on the Pull button to get your\ncollaborator’s latest changes.\n\n\nknitr::include_graphics(\"images/bpw/pull_button.png\")\n\n\n\n\nSwitch from the master branch to the branch associated\nwith your post:\n\n\nknitr::include_graphics(\"images/bpw/toggle_branches.png\")\n\n\n\n\nAfter you’re finished incorporating their feedback into the RMarkdown\nfile (.Rmd), click Knit and then run these commands in\nTerminal again to send your work back to GitHub:\n\n\ngert::git_add(\".\")\ngert::git_commit(\"Draft complete: blog-post-workflow\")\ngert::git_push()\n\n\n\nPlease let Matt & postdocs know when your revisions are\ncomplete and ready to appear on the live blog!\nSite Admin\nThese instructions will introduce an additional remote to your\nlocal repository. Only use them if you’ll be involved with managing\nupdates to the live blog (e.g. Matt & postdocs). All of these\nfunctions can be used the in RStudio Terminal.\nSetup\nBefore adding a second remote, it’s best to rename the UMN GitHub\nremote something like private. You can check the current\nname with:\ngit remote\nIf the UMN GitHub is still called origin (by default),\nrename it with:\ngit remote rename origin private\nLikewise, you should give the private branch\nmaster a different name, as the second remote will have a\nmaster branch, too. To see all of the remote branches\ncurrently in use:\ngit remote show private\nCheckout master and change its name to something like\nprivate-master:\ngit checkout master\ngit branch -m \"private-master\"\nNow, add the public remote and fetch its branches\n(there should only be one, called master):\ngit remote add public https://github.com/ipums/pma-data-hub\ngit fetch public\nCreate a local branch called public-master corresponding\nwith master on the public remote:\ngit branch public-master public/master\nAt this point, you’ll notice that RStudio shows two remotes (with the\nbranches you’ve fetched) and all of the local branches you’ve created so\nfar.\n\n\nknitr::include_graphics(\"images/bpw/dual-remotes.png\")\n\n\n\n\n\nIn this example, we set the local “private-master” branch to track\n“master” on the private remote. The “public-master” branch tracks\n“master” on the public remote.\nCreate a\nGit Hook to remove data from the public repo\nWe should never push PMA data extracts to the public\nrepository. Yet, we need to have these data available on the\nprivate repository in order to build each others’ posts when we want to\nreview or merge new content.\nYou might imagine that the only way to do this would be to manually\ndelete the data folder for each post just before we push\nsomething from our local version of public-master to the\nremote public/master. Luckily, git hooks offers a way to\nautomatically delete any incoming data folder headed to a merge with\npublic-master.\nSimply create a file at .git/hooks/post-merge containing\nthe following code:\n#! /bin/sh\ngreen='\\033[0;32m'\nnc='\\033[0m'\n\n# Start from the repository root.\ncd ./$(git rev-parse --show-cdup)\n\n# Delete data files and empty directories.\nif [ `git rev-parse --abbrev-ref HEAD` == \"public-master\" ]; then\n  echo \"${green}Deleting data files...${nc}\"\n  find . -path '*/data/*' -delete\n  find . -type d -empty -delete\nfi\n\nThis will only delete data folders if a branch called\npublic-master is currently checked out when we run\ngit merge (see below). If you gave a different name\nto your local public branch, you’ll have to edit this code!\nYou also must make this file executable. For Mac OS users, you can do\nthis by entering the following command into Terminal (assuming you’re\nalready in the pma data hub directory):\nchmod +x .git/hooks/post-merge\nNow, when you follow the merging steps below, any file saved in a\nfolder called data (including all sub-folders) will be\ndeleted automatically.\nMerging\nOur main goal is to avoid creating divergent commit histories\nbetween the internal repository and the public repository. In\npractice, that means a typical workflow will involve these steps:\nSquash and Merge the author’s branch to private/master\nBuild, Commit, and Push to private/master\nMerge private/master to public/master\nPush to public/master\nOur authoring / editing workflow generates a commit each time someone\nadds a change to the branch for a new post (you can run\ngit log on any branch to see its full commit history). We\nwill squash\nand merge this commit history into a single commit on\nprivate-master.\nFor example, with a new post on the branch\nblog-post-workflow:\ngit checkout private-master\ngit merge --squash blog-post-workflow\nNow, in RStudio, hit the Build Website button. Look over\nthe site to make sure everything looks good. (We won’t build on\npublic-master to avoid merge conflicts, so get those edits\nin now.)\n\n\nknitr::include_graphics(\"images/bpw/build.png\")\n\n\n\n\nWhen you’re ready, add all files and commit your changes with a\nmessage like:\ngit add .\ngit commit -m \"new post: blog-post-workflow\"\nAlthough your local branch has a different name, you can push your\ncommit to master on the private remote with\nthis command:\ngit push private HEAD:master\nWait a few minutes, and you’ll see that the GitHub Pages site hosted\nat UMN GitHub should update to reflect your changes.\nTo merge your private-master to\npublic-master:\ngit checkout public-master\ngit merge --squash private-master -X theirs\ngit add .\ngit commit -m \"new post: blog-post-workflow\"\n(It’s good practice to squash commits to private-master, too, since\nwe sometimes make quick-fixes there. The -X theirs part\ntells Git to defer to private-master over\npublic-master in case there are any conflicts.)\nIf you’ve created a Git Hook to automatically delete any\ndata folders (see above), you’re all set! If not,\nmanually delete them now. Finally, push your changes to the\nlive site:\ngit push public HEAD:master\nOther git tips\nNeed to rollback to a previous commit? Look for it in the\ngit log, and do a hard reset:\ngit log\ngit reset --hard 58ba4f0396b985fb5ab82c88f7bbc5c9cc619e71\nFor a checklist of updated files and their commit status:\ngit status\nTo see a list of files with unresolved conflicts\ngit diff --name-only --diff-filter=U\nIf you ever need to force a push to GitHub (e.g. if you REALLY must\noverwrite a commit), you can do that with the force option:\ngit push -f \n\nYou can check its location by running\n“which git” in Terminal, and “git –version” to check the installed\nversion. If git is somehow not installed, use the “Install git using\nHomebrew” instructions here↩︎\nMac users: type “which git” in\nterminal and enter the result; Windows users: look for git.exe (most\nlikely in Program Files)↩︎\n",
      "last_modified": "2022-07-01T14:04:13-05:00"
    },
    {
      "path": "blogging-with-rmarkdown.html",
      "title": "Blogging with RMarkdown",
      "description": "Quick tips for authoring and editing blog posts with RMarkdown\n",
      "author": [
        {
          "name": "Matt Gunther",
          "url": {}
        }
      ],
      "date": "01-25-2021",
      "contents": "\n\nContents\nCreating a blog post\nYAML Metadata\nTitle\nDescription\nCategories\nAuthor\nDate\nOutput (Table of\nContents)\nPreview\n\nCode chunks\nChunk options\nData Visualizations from\nchunks\n\nFormatted Text\nHeadings\nBold and Italics\nInline\ncode (variable names, packages, functions, etc)\nHyperlinks\nAsides and Footnotes\n\n\nRMarkdown documents (.Rmd) work just like regular R scripts (.R) in\nthat you can use them as a space to develop code before sending it to\nthe R Console. The main difference is that an RMarkdown file breaks code\ninto discrete “chunks” of code that can be separated by blocks of text.\nWhen you run an RMarkdown document, the Console ignores anything that’s\nnot included in a code chunk (so there’s no need to use the comment\nindicator #).\nRMarkdown is a powerful tool for sharing and teaching R code, but it\nhas become even more useful with the advent of packages like knitr, which can transform RMarkdown\nfiles into Word documents, PDFs, sideshows, HTML pages, and more. The\nPMA Data Hub is built with knitr and another package called\ndistill, which\ntransforms RMarkdown files into fully formatted blog posts.\nIf you’ve never used RMarkdown, knitr, or\ndistill before, you’ll need to install them with your R\nConsole now:\n\n\ninstall.packages(\"RMarkdown\")\ninstall.packages(\"knitr\")\ninstall.packages(\"distill\")\n\n\n\nCreating a blog post\nIn this post, we’ll assume that you’ve already reviewed the Blog Post\nWorkflow, so you’re familiar with the process for creating a new\nblog post on a new branch of the Git repository.\nAssuming you’ve created a new branch for your post, you’ll create and\nopen an RMarkdown file when you run:\n\n\ndistill::create_post(\"Getting started with RMarkdown\")\n\n\n\nAt this point, RStudio should look something like this:\n\n\n\n\nCircled in red: notice that a new folder was created in the “_posts”\ndirectory shown in the Files tab, and your new files also are now\nbeing tracked in the Git tab.\nAn RMarkdown file opens with a template showing a YAML metadata\nheader, a code chunk called “setup”, and some boilerplate text.\nYAML Metadata\nYour RMarkdown template contains a header consisting of a series of\nkey: \"value\" pairs written in YAML. This is where we store metadata for\neach article appearing both at 1) the top of every blog post, and 2) on\nthe blog homepage.\nHere’s an example of a complete YAML header for a post on the Data\nHub:\n\n\n\nTitle\nThis will be the main Title shown in CSS style H1 at the top of your\npost. We automatically reformat to all-caps, so this is not\ncase-sensitive.\nPlease do not use sentence punctuation (unless your title is a\nquestion).\nEnsure that your Title matches the “H1 Title” on the Data Hub\nTracking Sheet.\nDescription\nThis is the subtitle shown in CSS style H2 (just below the H1 Title).\nThis subtitle is case-senstive.\nPlease do not use sentence punctuation (unless your subtitle is a\nquestion).\nTry your best to avoid repeating the subtitle pattern “How to X”.\nSubtitles should emphasize the importance of a post in the\nparticular context of analyzing PMA data if possible.\nCategories\nThe are the “tags” that will help readers filter posts and navigate\nthrough different thematic modules. What tags should you include?\nModule name (Column A of the tracking sheet)\nPost type (Column B of the tracking sheet)\nImportant package functions (package::function) or\ntechniques\nAnalysis tools\nAlways check to see if your tags have been used in a previous post\nand, if so, make sure to match their existing style, spelling, etc.\nAuthor\nAlways include your name and your affiliation with the project.\nOptionally, feel free to link to a personal website or social media\naccount!\nExamples:\n\nauthor:\n  - first_name: \"Yihui\"\n    last_name: \"Xie\"\n    url: https://github.com/yihui\n    affiliation: RStudio\n    affiliation_url: https://www.rstudio.com\n    orcid_id: 0000-0003-0645-5666\n  - name: \"JJ Allaire\"\n    url: https://github.com/jjallaire\n    affiliation: RStudio\n    affiliation_url: https://www.rstudio.com\n  - name: \"Rich Iannone\"\n    url: https://github.com/rich-iannone\n    affiliation: RStudio\n    affiliation_url: https://www.rstudio.com\n\nDate\nAdmin will update this to reflect date of publication.\nOutput (Table of Contents)\nThe PMA Data Hub uses a floating table of contents that follows up to\n3 heading depths. Please format exactly as shown:\n\n\noutput:\n  distill::distill_article:\n    self_contained: false\n    toc: true\n    toc_depth: 3\n    toc_float: true\n\n\n\nPreview\nThis is the image that will appear alongside your post in the blog\nhomepage. If you don’t specify an image, distill will\nautomatically select the first image in your post; if there are no\nimages, the space will be left blank (but please consider using\none!)\nThe file path to your image should be relative to the RMarkdown\nfile, itself. For example:\n\n\n\nThis shows the folder “2020-12-09-mapping-contraceptive-stockouts” in\nthe “_posts” folder. The .Rmd file lives in the top level of the folder,\nand the desired image Rlogo.png lives in the\nimages subfolder. The correct way to reference the image\nis:\n\n\npreview: images/static-map.png\n\n\n\nCode chunks\nEach chunk of code in your RMarkdown file must be offset as shown\nhere (note the tic-marks and “r” in curly brackets):\n\n\n\n\nThe “r” tells R to interpret this chunk as R code (RMarkdown also\nsupports other languages like Python, Julia, C++, and SQL).\nYou can quickly insert a code chunk via the Code menu in\nRStudio’s menu bar, or by using the keyboard shortcut shown\nthere (e.g. command + option + I for mac users).\nChunk options\nYou can set specific rendering instructions for RMarkdown inside the\ncurly brackets. Some common options include:\n\nr, eval = F # don't run the code in this chunk\nr, echo = F # hide the code, but not the results \nr, eval = T, echo = F # combine options with commas like this\nr, error = F, message = F, warning = F # hide errors, messages, & warnings\n\nA full list of chunk options are explained here.\nYou can also set default options for all of your code chunks at the\ntop of your RMarkdown document (see the setup chunk that\nopens in a new template):\n\n\nknitr::opts_chunk$set(\n  echo = TRUE, \n  eval = FALSE,\n  error = FALSE,\n  message = FALSE, \n  warning = FALSE\n)\n\n\n\nData Visualizations from\nchunks\nThe Distill website explains how to format figures, tables, and diagrams via\ncode chunk arguments.\nFormatted Text\nHere, we’ll show some examples for adding formatted text to the body\nof your RMarkdown file (i.e. everything that not included in\nthe YAML header or a code chunk).\nHeadings\nUse the # symbol once for an H1 heading, twice\n## for an H2 heading, or three times ### for\nan H3 heading.\nLook at the table of contents for this page: H1 headings are left\naligned, and H2 headings are indented once; any H3 headings would be\nindented twice if we had them.\nBold and Italics\nItalics are offset by one * like this:\n\n*Italics* are offset by one `*` like this:\n\nBold text is offset by two ** like\nthis:\n\n**Bold** text is offset by two `**` like this:\n\nInline code\n(variable names, packages, functions, etc)\nWe use a particular font for code chunks, and this font also gets\napplied in the text body to any mention of a variable name, package, or\nfunction - basically anything that might appear in the console.\nNote: the first time you use a variable\nname, package, or function in a post, it’s usually best in include a\nhyperlink to the underlying documentation. When you insert a\nhyperlink, do not offset text for inline code.\nInline code is offset by one ` like this:\n\n`Inline code` is offset by one ` like this:\n\nHyperlinks\nA hyperlink should be used the first time you mention a variable,\npackage, function, or anything else that has underlying documentation at\nan external source.\nA hyperlink can be inserted\nlike this:\nA [hyperlink](http://bitly.com/98K8eH) can be inserted like this:\nIf you want to link to another page on the PMA Data Hub, use relative\nlinks (do not include the full path). For example:\nA relative path to the ABOUT page:\nA relative path to the [ABOUT](about.html) page:\nOr, a relative path to one of the blog\nposts:\nOr, a relative path to one of the [blog posts](posts/2020-12-09-mapping-contraceptive-stockouts/index.html)\nHere is a relative path to one of the headings\non that blog post:\nHere is a relative path to one of the [headings](posts/2020-12-09-mapping-contraceptive-stockouts/index.html#shiny-application) on that blog post\nAsides and Footnotes\nAsides are designed for very brief comments rendered to the side of\nthe text body. They must be offset with <aside> tags\nlike this:\n<aside>\nFYI: formatted text in an \"aside\" must use <b>HTML tags<\/b>\n<\/aside>\n\nFYI: formatted text in an “aside” must use HTML tags\nAsides are associated with a particular paragraph or code chunk, so\nthey will create white-space in the text body if they become longer than\ntheir partner! For longer comments, consider using a footnote.1\nInsert a footnote here^[This is my footnote]\n\nFootnotes appear as hover-text, and\nthey also populate at the bottom of the page.↩︎\n",
      "last_modified": "2022-07-01T14:04:13-05:00"
    },
    {
      "path": "CODE_OF_CONDUCT.html",
      "title": "Contributor Covenant Code of Conduct",
      "description": "By contributing comments or posts to this blog, you agree to abide by the following code of conduct\n",
      "author": [],
      "contents": "\n\nContents\nOur Pledge\nOur Standards\nEnforcement\nResponsibilities\nScope\nEnforcement\nEnforcement Guidelines\n1. Correction\n2. Warning\n3. Temporary Ban\n4. Permanent Ban\n\n\nAttribution\n\nOur Pledge\nWe as members, contributors, and leaders pledge to make participation\nin our community a harassment-free experience for everyone, regardless\nof age, body size, visible or invisible disability, ethnicity, sex\ncharacteristics, gender identity and expression, level of experience,\neducation, socio-economic status, nationality, personal appearance,\nrace, religion, or sexual identity and orientation.\nWe pledge to act and interact in ways that contribute to an open,\nwelcoming, diverse, inclusive, and healthy community.\nOur Standards\nExamples of behavior that contributes to a positive environment for\nour community include:\nDemonstrating empathy and kindness toward other people\nBeing respectful of differing opinions, viewpoints, and\nexperiences\nGiving and gracefully accepting constructive feedback\nAccepting responsibility and apologizing to those affected by our\nmistakes, and learning from the experience\nFocusing on what is best not just for us as individuals, but for the\noverall community\nExamples of unacceptable behavior include:\nThe use of sexualized language or imagery, and sexual attention or\nadvances of any kind\nTrolling, insulting or derogatory comments, and personal or\npolitical attacks\nPublic or private harassment\nPublishing others’ private information, such as a physical or email\naddress, without their explicit permission\nOther conduct which could reasonably be considered inappropriate in\na professional setting\nEnforcement Responsibilities\nCommunity leaders are responsible for clarifying and enforcing our\nstandards of acceptable behavior and will take appropriate and fair\ncorrective action in response to any behavior that they deem\ninappropriate, threatening, offensive, or harmful.\nCommunity leaders have the right and responsibility to remove, edit,\nor reject comments, commits, code, wiki edits, issues, and other\ncontributions that are not aligned to this Code of Conduct, and will\ncommunicate reasons for moderation decisions when appropriate.\nScope\nThis Code of Conduct applies within all community spaces, and also\napplies when an individual is officially representing the community in\npublic spaces. Examples of representing our community include using an\nofficial e-mail address, posting via an official social media account,\nor acting as an appointed representative at an online or offline\nevent.\nEnforcement\nInstances of abusive, harassing, or otherwise unacceptable behavior\nmay be reported to the community leaders responsible for enforcement at\n[INSERT CONTACT METHOD]. All complaints will be reviewed and\ninvestigated promptly and fairly.\nAll community leaders are obligated to respect the privacy and\nsecurity of the reporter of any incident.\nEnforcement Guidelines\nCommunity leaders will follow these Community Impact Guidelines in\ndetermining the consequences for any action they deem in violation of\nthis Code of Conduct:\n1. Correction\nCommunity Impact: Use of inappropriate language or\nother behavior deemed unprofessional or unwelcome in the community.\nConsequence: A private, written warning from\ncommunity leaders, providing clarity around the nature of the violation\nand an explanation of why the behavior was inappropriate. A public\napology may be requested.\n2. Warning\nCommunity Impact: A violation through a single\nincident or series of actions.\nConsequence: A warning with consequences for\ncontinued behavior. No interaction with the people involved, including\nunsolicited interaction with those enforcing the Code of Conduct, for a\nspecified period of time. This includes avoiding interactions in\ncommunity spaces as well as external channels like social media.\nViolating these terms may lead to a temporary or permanent ban.\n3. Temporary Ban\nCommunity Impact: A serious violation of community\nstandards, including sustained inappropriate behavior.\nConsequence: A temporary ban from any sort of\ninteraction or public communication with the community for a specified\nperiod of time. No public or private interaction with the people\ninvolved, including unsolicited interaction with those enforcing the\nCode of Conduct, is allowed during this period. Violating these terms\nmay lead to a permanent ban.\n4. Permanent Ban\nCommunity Impact: Demonstrating a pattern of\nviolation of community standards, including sustained inappropriate\nbehavior, harassment of an individual, or aggression toward or\ndisparagement of classes of individuals.\nConsequence: A permanent ban from any sort of public\ninteraction within the community.\nAttribution\nThis Code of Conduct is adapted from the Contributor Covenant,\nversion 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\nCommunity Impact Guidelines were inspired by Mozilla’s code of conduct\nenforcement ladder.\nFor answers to common questions about this code of conduct, see the\nFAQ at https://www.contributor-covenant.org/faq. Translations\nare available at https://\nwww.contributor-covenant.org/translations.\n\n\n\n",
      "last_modified": "2022-07-01T14:04:14-05:00"
    },
    {
      "path": "CONTRIBUTING.html",
      "title": "Contributing to the PMA Data Hub",
      "description": "How to write or propose a change to a post on this blog\n",
      "author": [],
      "contents": "\nComing soon!\n\n\n\n",
      "last_modified": "2022-07-01T14:04:14-05:00"
    },
    {
      "path": "index.html",
      "title": "Data Analysis Hub",
      "author": [],
      "contents": "\n\n\n\n",
      "last_modified": "2022-07-01T14:04:15-05:00"
    },
    {
      "path": "introduction.html",
      "title": "Introduction to IPUMS PMA Data Analysis",
      "author": [],
      "contents": "\n\n \n\nTrouble loading this page?\nYou may need to disable your ad-blocker or switch browsers.\n\n\n\n",
      "last_modified": "2022-07-01T14:04:15-05:00"
    },
    {
      "path": "LICENSE.html",
      "title": "License",
      "description": "All PMA Data Hub content is protected by the MPL version 2.0 license displayed below (unless otherwise noted). \n",
      "author": [],
      "contents": "\n\nContents\nMozilla Public License\nVersion 2.0\n1. Definitions\n2. License Grants and\nConditions\n3. Responsibilities\n4.\nInability to Comply Due to Statute or Regulation\n5. Termination\n6. Disclaimer of Warranty\n7. Limitation of\nLiability\n8. Litigation\n9. Miscellaneous\n10. Versions of the\nLicense\nExhibit A -\nSource Code Form License Notice\nExhibit\nB - “Incompatible With Secondary Licenses” Notice\n\n\nMozilla Public License\nVersion 2.0\n1. Definitions\n1.1. “Contributor” means each individual or legal entity that\ncreates, contributes to the creation of, or owns Covered Software.\n1.2. “Contributor Version” means the combination of the Contributions\nof others (if any) used by a Contributor and that particular\nContributor’s Contribution.\n1.3. “Contribution” means Covered Software of a particular\nContributor.\n1.4. “Covered Software” means Source Code Form to which the initial\nContributor has attached the notice in Exhibit A, the Executable Form of\nsuch Source Code Form, and Modifications of such Source Code Form, in\neach case including portions thereof.\n1.5. “Incompatible With Secondary Licenses” means\n(a) that the initial Contributor has attached the notice described\n    in Exhibit B to the Covered Software; or\n\n(b) that the Covered Software was made available under the terms of\n    version 1.1 or earlier of the License, but not also under the\n    terms of a Secondary License.\n1.6. “Executable Form” means any form of the work other than Source\nCode Form.\n1.7. “Larger Work” means a work that combines Covered Software with\nother material, in a separate file or files, that is not Covered\nSoftware.\n1.8. “License” means this document.\n1.9. “Licensable” means having the right to grant, to the maximum\nextent possible, whether at the time of the initial grant or\nsubsequently, any and all of the rights conveyed by this License.\n1.10. “Modifications” means any of the following:\n(a) any file in Source Code Form that results from an addition to,\n    deletion from, or modification of the contents of Covered\n    Software; or\n\n(b) any new file in Source Code Form that contains any Covered\n    Software.\n1.11. “Patent Claims” of a Contributor means any patent claim(s),\nincluding without limitation, method, process, and apparatus claims, in\nany patent Licensable by such Contributor that would be infringed, but\nfor the grant of the License, by the making, using, selling, offering\nfor sale, having made, import, or transfer of either its Contributions\nor its Contributor Version.\n1.12. “Secondary License” means either the GNU General Public\nLicense, Version 2.0, the GNU Lesser General Public License, Version\n2.1, the GNU Affero General Public License, Version 3.0, or any later\nversions of those licenses.\n1.13. “Source Code Form” means the form of the work preferred for\nmaking modifications.\n1.14. “You” (or “Your”) means an individual or a legal entity\nexercising rights under this License. For legal entities, “You” includes\nany entity that controls, is controlled by, or is under common control\nwith You. For purposes of this definition, “control” means (a) the\npower, direct or indirect, to cause the direction or management of such\nentity, whether by contract or otherwise, or (b) ownership of more than\nfifty percent (50%) of the outstanding shares or beneficial ownership of\nsuch entity.\n2. License Grants and\nConditions\n2.1. Grants\nEach Contributor hereby grants You a world-wide, royalty-free,\nnon-exclusive license:\nunder intellectual property rights (other than patent or\ntrademark) Licensable by such Contributor to use, reproduce, make\navailable, modify, display, perform, distribute, and otherwise exploit\nits Contributions, either on an unmodified basis, with Modifications, or\nas part of a Larger Work; and\nunder Patent Claims of such Contributor to make, use, sell, offer\nfor sale, have made, import, and otherwise transfer either its\nContributions or its Contributor Version.\n2.2. Effective Date\nThe licenses granted in Section 2.1 with respect to any Contribution\nbecome effective for each Contribution on the date the Contributor first\ndistributes such Contribution.\n2.3. Limitations on Grant Scope\nThe licenses granted in this Section 2 are the only rights granted\nunder this License. No additional rights or licenses will be implied\nfrom the distribution or licensing of Covered Software under this\nLicense. Notwithstanding Section 2.1(b) above, no patent license is\ngranted by a Contributor:\nfor any code that a Contributor has removed from Covered\nSoftware; or\nfor infringements caused by: (i) Your and any other third party’s\nmodifications of Covered Software, or (ii) the combination of its\nContributions with other software (except as part of its Contributor\nVersion); or\nunder Patent Claims infringed by Covered Software in the absence\nof its Contributions.\nThis License does not grant any rights in the trademarks, service\nmarks, or logos of any Contributor (except as may be necessary to comply\nwith the notice requirements in Section 3.4).\n2.4. Subsequent Licenses\nNo Contributor makes additional grants as a result of Your choice to\ndistribute the Covered Software under a subsequent version of this\nLicense (see Section 10.2) or under the terms of a Secondary License (if\npermitted under the terms of Section 3.3).\n2.5. Representation\nEach Contributor represents that the Contributor believes its\nContributions are its original creation(s) or it has sufficient rights\nto grant the rights to its Contributions conveyed by this License.\n2.6. Fair Use\nThis License is not intended to limit any rights You have under\napplicable copyright doctrines of fair use, fair dealing, or other\nequivalents.\n2.7. Conditions\nSections 3.1, 3.2, 3.3, and 3.4 are conditions of the licenses\ngranted in Section 2.1.\n3. Responsibilities\n3.1. Distribution of Source Form\nAll distribution of Covered Software in Source Code Form, including\nany Modifications that You create or to which You contribute, must be\nunder the terms of this License. You must inform recipients that the\nSource Code Form of the Covered Software is governed by the terms of\nthis License, and how they can obtain a copy of this License. You may\nnot attempt to alter or restrict the recipients’ rights in the Source\nCode Form.\n3.2. Distribution of Executable Form\nIf You distribute Covered Software in Executable Form then:\nsuch Covered Software must also be made available in Source Code\nForm, as described in Section 3.1, and You must inform recipients of the\nExecutable Form how they can obtain a copy of such Source Code Form by\nreasonable means in a timely manner, at a charge no more than the cost\nof distribution to the recipient; and\nYou may distribute such Executable Form under the terms of this\nLicense, or sublicense it under different terms, provided that the\nlicense for the Executable Form does not attempt to limit or alter the\nrecipients’ rights in the Source Code Form under this License.\n3.3. Distribution of a Larger Work\nYou may create and distribute a Larger Work under terms of Your\nchoice, provided that You also comply with the requirements of this\nLicense for the Covered Software. If the Larger Work is a combination of\nCovered Software with a work governed by one or more Secondary Licenses,\nand the Covered Software is not Incompatible With Secondary Licenses,\nthis License permits You to additionally distribute such Covered\nSoftware under the terms of such Secondary License(s), so that the\nrecipient of the Larger Work may, at their option, further distribute\nthe Covered Software under the terms of either this License or such\nSecondary License(s).\n3.4. Notices\nYou may not remove or alter the substance of any license notices\n(including copyright notices, patent notices, disclaimers of warranty,\nor limitations of liability) contained within the Source Code Form of\nthe Covered Software, except that You may alter any license notices to\nthe extent required to remedy known factual inaccuracies.\n3.5. Application of Additional Terms\nYou may choose to offer, and to charge a fee for, warranty, support,\nindemnity or liability obligations to one or more recipients of Covered\nSoftware. However, You may do so only on Your own behalf, and not on\nbehalf of any Contributor. You must make it absolutely clear that any\nsuch warranty, support, indemnity, or liability obligation is offered by\nYou alone, and You hereby agree to indemnify every Contributor for any\nliability incurred by such Contributor as a result of warranty, support,\nindemnity or liability terms You offer. You may include additional\ndisclaimers of warranty and limitations of liability specific to any\njurisdiction.\n4. Inability\nto Comply Due to Statute or Regulation\nIf it is impossible for You to comply with any of the terms of this\nLicense with respect to some or all of the Covered Software due to\nstatute, judicial order, or regulation then You must: (a) comply with\nthe terms of this License to the maximum extent possible; and (b)\ndescribe the limitations and the code they affect. Such description must\nbe placed in a text file included with all distributions of the Covered\nSoftware under this License. Except to the extent prohibited by statute\nor regulation, such description must be sufficiently detailed for a\nrecipient of ordinary skill to be able to understand it.\n5. Termination\n5.1. The rights granted under this License will terminate\nautomatically if You fail to comply with any of its terms. However, if\nYou become compliant, then the rights granted under this License from a\nparticular Contributor are reinstated (a) provisionally, unless and\nuntil such Contributor explicitly and finally terminates Your grants,\nand (b) on an ongoing basis, if such Contributor fails to notify You of\nthe non-compliance by some reasonable means prior to 60 days after You\nhave come back into compliance. Moreover, Your grants from a particular\nContributor are reinstated on an ongoing basis if such Contributor\nnotifies You of the non-compliance by some reasonable means, this is the\nfirst time You have received notice of non-compliance with this License\nfrom such Contributor, and You become compliant prior to 30 days after\nYour receipt of the notice.\n5.2. If You initiate litigation against any entity by asserting a\npatent infringement claim (excluding declaratory judgment actions,\ncounter-claims, and cross-claims) alleging that a Contributor Version\ndirectly or indirectly infringes any patent, then the rights granted to\nYou by any and all Contributors for the Covered Software under Section\n2.1 of this License shall terminate.\n5.3. In the event of termination under Sections 5.1 or 5.2 above, all\nend user license agreements (excluding distributors and resellers) which\nhave been validly granted by You or Your distributors under this License\nprior to termination shall survive termination.\n6. Disclaimer of Warranty\nCovered Software is provided under this License on an “as is”\nbasis, without warranty of any kind, either expressed, implied, or\nstatutory, including, without limitation, warranties that the\nCovered Software is free of defects, merchantable, fit for a\nparticular purpose or non-infringing. The entire risk as to the\nquality and performance of the Covered Software is with You.\nShould any Covered Software prove defective in any respect, You\n(not any Contributor) assume the cost of any necessary servicing,\nrepair, or correction. This disclaimer of warranty constitutes an\nessential part of this License. No use of any Covered Software is\nauthorized under this License except under this disclaimer.\n7. Limitation of Liability\nUnder no circumstances and under no legal theory, whether tort\n(including negligence), contract, or otherwise, shall any\nContributor, or anyone who distributes Covered Software as\npermitted above, be liable to You for any direct, indirect,\nspecial, incidental, or consequential damages of any character\nincluding, without limitation, damages for lost profits, loss of\ngoodwill, work stoppage, computer failure or malfunction, or any\nand all other commercial damages or losses, even if such party\nshall have been informed of the possibility of such damages. This\nlimitation of liability shall not apply to liability for death or\npersonal injury resulting from such party’s negligence to the\nextent applicable law prohibits such limitation. Some\njurisdictions do not allow the exclusion or limitation of\nincidental or consequential damages, so this exclusion and\nlimitation may not apply to You.\n8. Litigation\nAny litigation relating to this License may be brought only in the\ncourts of a jurisdiction where the defendant maintains its principal\nplace of business and such litigation shall be governed by laws of that\njurisdiction, without reference to its conflict-of-law provisions.\nNothing in this Section shall prevent a party’s ability to bring\ncross-claims or counter-claims.\n9. Miscellaneous\nThis License represents the complete agreement concerning the subject\nmatter hereof. If any provision of this License is held to be\nunenforceable, such provision shall be reformed only to the extent\nnecessary to make it enforceable. Any law or regulation which provides\nthat the language of a contract shall be construed against the drafter\nshall not be used to construe this License against a Contributor.\n10. Versions of the License\n10.1. New Versions\nMozilla Foundation is the license steward. Except as provided in\nSection 10.3, no one other than the license steward has the right to\nmodify or publish new versions of this License. Each version will be\ngiven a distinguishing version number.\n10.2. Effect of New Versions\nYou may distribute the Covered Software under the terms of the\nversion of the License under which You originally received the Covered\nSoftware, or under the terms of any subsequent version published by the\nlicense steward.\n10.3. Modified Versions\nIf you create software not governed by this License, and you want to\ncreate a new license for such software, you may create and use a\nmodified version of this License if you rename the license and remove\nany references to the name of the license steward (except to note that\nsuch modified license differs from this License).\n10.4. Distributing Source Code Form that is Incompatible With\nSecondary Licenses\nIf You choose to distribute Source Code Form that is Incompatible\nWith Secondary Licenses under the terms of this version of the License,\nthe notice described in Exhibit B of this License must be attached.\nExhibit A - Source\nCode Form License Notice\nThis Source Code Form is subject to the terms of the Mozilla Public\nLicense, v. 2.0. If a copy of the MPL was not distributed with this\nfile, You can obtain one at http://mozilla.org/MPL/2.0/.\nIf it is not possible or desirable to put the notice in a particular\nfile, then You may include the notice in a location (such as a LICENSE\nfile in a relevant directory) where a recipient would be likely to look\nfor such a notice.\nYou may add additional accurate notices of copyright ownership.\nExhibit\nB - “Incompatible With Secondary Licenses” Notice\nThis Source Code Form is “Incompatible With Secondary Licenses”, as\ndefined by the Mozilla Public License, v. 2.0.\n\n\n\n",
      "last_modified": "2022-07-01T14:04:16-05:00"
    }
  ],
  "collections": ["posts/posts.json"]
}
