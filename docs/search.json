{
  "articles": [
    {
      "path": "about.html",
      "title": "About this blog",
      "author": [],
      "contents": "\n\nContents\nWhy a blog?\nTry out our code!\nVisit us on GitHub\n\nStatisitcal Software\n\nIPUMS PMA harmonizes the Performance Monitoring for Action (PMA) data series (it was formerly known as Performance Monitoring and Accountability 2020 - PMA2020). It provides an interactive web dissemination system for PMA data with variable documentation on thousands of harmonized variables on family planning, water and sanitation, and health. PMA is fielded by the Bill & Melinda Gates Foundation and Johns Hopkins University using streamlined and high-frequency data collection in 11 FP2020 pledging countries. Read more about the project here.\nIPUMS PMA is just one of many IPUMS data projects. IPUMS provides census and survey data from around the world integrated across time and space. IPUMS integration and documentation makes it easy to study change, conduct comparative research, merge information across data types, and analyze individuals within family and community context. Data and services are available free of charge.\nWhy a blog?\nAs the data available at IPUMS PMA continues to grow, we wanted a space to demonstrate the range ways that PMA data can help address some of today’s most pressing women’s health concerns.\nYou’ll find blog posts showing how to use common statistical software to do things like:\ncompare PMA data across countries and survey years\nuse service delivery point data to contextualize outcomes for individuals\nmerge PMA data to external spatial datasets\nexplore data related to water, hygiene, nutrition, and food security\nTry out our code!\nIf you register for a free IPUMS PMA user account, you’ll be able to download the same data extracts we feature in our posts.\nVisit us on GitHub\nWhile it’s not necessary to visit our GitHub repository to access the code you’ll find on this blog, we hope that visitors will feel encouraged to join a conversation, ask questions, or even post code of their own! You can also use the GitHub repository to download code from all of our posts in one step.\nTo submit a post of your own, please take a look at our Contributing Guide and Code of Conduct. By contributing to this project, you agree to abide by the terms of each.\nIf you spot an error or a place where our code could be improved, please consider opening an “issue” on our GitHub repository.\nStatisitcal Software\nCurrently, most of the code highlighted in our articles is written in R, a free and open-source program used by data analysts around the world. We’ve built the blog, itself, with an R package called distill.\n\nNew to R? Not to worry! We’ll post tips and links to help you get going in the “R tips” menu above.\nExperienced R users will notice that we use tidyverse conventions wherever possible, making the tidyverse package library an important prerequisite if you want to try our code on your own. We recommend the excellent, free introductory text R for Data Science for newcomers to R and tidyverse, alike.\nStata users: we are also planning to develop Stata code for each of our articles, which will be made available by a designated download button and in a “stata” folder on the GitHub repository. However, the inline code you’ll find in our articles is likely to remain in R.\n\n\n\n",
      "last_modified": "2021-08-16T13:20:28-05:00"
    },
    {
      "path": "blog-post-workflow.html",
      "title": "Blog post workflow",
      "description": "How to create or review a PMA Data Hub blog post\n",
      "author": [
        {
          "name": "Matt Gunther",
          "url": {}
        }
      ],
      "date": "02-02-2021",
      "contents": "\n\nContents\nAll users: first time setup\nR, RStudio, and required packages\nInitialize your UMN GitHub account\nUsing UMN GitHub from RStudio\nThe PMA Data Hub Repository\n\nAuthors: Creating a new post\nCreate a new branch\nCreate a new folder in \"_posts\"\nPut your data in a “data” folder!\nPush your post to GitHub\n\nEditors\nPull the author’s branch to your computer\nLocate and edit the new post\nPush the edited post back to GitHub\n\nAll users: making revisions\nSite Admin\nSetup\nCreate a Git Hook to remove data from the public repo\nMerging\nOther git tips\n\n\nAll users: first time setup\nR, RStudio, and required packages\nTo get a copy of R, visit the Comprehensive R Archive Network (CRAN) and choose the right download link for your operating system.\nThe PMA Data Hub is organized as an RStudio Project, so you’ll also need to use RStudio (not base R).\nNote: a copy of RStudio running R version 4.0.2 (or higher) lives on the MPC gp1 server here. Members of the MPC GitHub organization can access an article specifically about using RStudio on gp1 (e.g. how to build a package library) here.\nWhen you’ve got RStudio set up, install these packages:\n\n\ninstall.packages(\"rmarkdown\")\ninstall.packages(\"knitr\")\ninstall.packages(\"distill\")\ninstall.packages(\"usethis\")\n\n\n\nTroubleshooting note: the package rmarkdown comes along with RStudio, but you may receive an older version than we need to build the site. So, when you try install.packages(\"rmarkdown\"), you may get a message asking to restart R (avoiding a conflict with the prior version). We’ve found that it’s best to reply ‘No’ to the restart prompt, wait for rmarkdown to install, and then re-launch RStudio. If you do choose to restart, you may experience a recursive loop of restart prompts!\nInitialize your UMN GitHub account\nContributors to the PMA Data Hub will work on an internal copy of the public site - it’s visible only to certain people affiliated with the MPC. A smaller team of Data Hub “admin” (currently Matt & postdocs) will take care of migrating content from the private site to our public site: we’re always here to help with formatting, editing, and version control!\nSo what is UMN GitHub? GitHub, itself, is a company that hosts projects on proprietary server: when you make a repository “public”, anyone in the world can visit your project on a GitHub server. GitHub also makes its underlying software available to institutions that want to provide a similar service restricted to institutional members. In practice, UMN operates its own GitHub server where organizations like the MPC can host projects that are more private in scope.\nUMN GitHub is an instance of Enterprise GitHub, whereas the public version of our blog lives in a space that folks sometimes call “public GitHub”. It’s common for people to have one account for “public GitHub” and one account for their job associated with an “enterprise GitHub”. To initialize an account for UMN GitHub, visit github.umn.edu and log in with your University Internet ID and password.\nUsing UMN GitHub from RStudio\nFirst things first: you must install install Git on your computer if it isn’t there already. Mac OS comes with git installed,1 while other users should download the right Git for their operation system. If you’re using RStudio on the gp1 server, Git is already installed.\nNext, open the Global Options menu in RStudio and locate the Git/SVN tab. Ensure that the box shown below is checked, and then enter the location of the executable file2 for your Git installation:\n\n\n\nLastly, you should provide Git with a username, email, and Personal Access Token (PAT) for your UMN GitHub account. If you’ve installed usethis as shown above, you’ll be able to set these up with R commands (changes will be applied to globally wherever you use Git on your operating system). First, set the username and email address for your UMN GitHub account. For example, mine are:\nWhy a PAT? GitHub plans to deprecate password authentication in the near future. You could use one for now (like the example below), but you’ll need a PAT soon!\n\n\ngert::git_config_global_set(\"user.name\", \"Matt Gunther\")\ngert::git_config_global_set(\"user.email\", \"mgunther@umn.edu\")\n\n\n\nThen, create a PAT for your account with:\n\n\nusethis::create_github_token(host = \"https://github.umn.edu\")\n\n\n\nYour browser will open to a webpage. Check all the boxes you see, then click the green Generate Token button. On the next page, notice the very long string shown in the green box: this is your PAT. Don’t close this page yet!. Return to R and call:\n\n\ngitcreds::gitcreds_set(\"https://github.umn.edu\")\n\n\n\nYou’ll be asked to enter a new password or token: copy and paste your PAT from your browser and press Enter. From now on, RStudio and Git will be able to access your UMN GitHub account automatically! (If you have a personal GitHub account at github.com, you could repeat this process substituting https://github.com for https://github.umn.edu, and Git will automatically choose the right credentials based on the repository associated with your project).\nThe PMA Data Hub Repository\nOpen RStudio and navigate to File > New Project, then select Version Control:\n\n\n\nChoose Git to clone our project from a GitHub repository:\n\n\n\nOn the next menu page, enter the address for the enterprise repository exactly as shown (do not clone the public repository):\nhttps://github.umn.edu/mpc/pma-data-hub/\nAlso enter the project directory name “pma-data-hub” as shown:\npma-data-hub\nIn the third field, choose a location where you would like to save this file on your computer (mine was “~/R” - insert your own path, instead). Finally, click Create Project.\n\nWhen choosing a place to save this project, do not save to a network drive. This seems to cause RStudio to crash!\n\n\n\nIf you have not configured Git to automatically use your UMN GitHub credentials with the steps shown above, you may be prompted to provide them in a pop-up window:\n\n\n\n\nUntil you configure Git with these credentials, you’ll have to do this every time you interact with GitHub. Additionally, password authentication for GitHub will be deprecated in the near future so you’ll need to do it soon!\nAfter a short bit, RStudio will relaunch and open the new project. If you adjust the windows to show the tabs Git (left) and Files (right), you should see something like this:\n\n\n\nYou have now downloaded a copy of the Enterprise repository to your computer!\nMoreover, because you’ve connected these files to a GitHub repository, the RStudio Project will now keep track of changes you make to the files in this folder, and it will prompt you to upload your changes back to GitHub: as you add, edit, or delete files, a list of changes will appear in the Git tab.\n\nTo open an RStudio project, click on the file pma-data-hub.Rproj. If you ever forget, RStudio won’t know to look for a Git history associated with all of the underlying files.\nNotice the word master shown in the Git tab - this shows that any changes we make to files will be recorded in our local copy of the “master” version of the repository. If we made changes here and then pushed them to GitHub, they would be reflected on the “master” version we’ve saved there, too.\nIn general, Matt and postdocs will be responsible for merging finished blog posts to the master branch and deploying its contents to the “live” blog that’s seen by users (for details, see site admin instructions below). All other contributors should create their own branch when writing a new blog post; Matt or postdocs will merge them to “master” after they’ve been reviewed and approved by an editor. Read on!\nAuthors: Creating a new post\nCreate a new branch\nNotice that the Git tab in RStudio has a purple icon:\n\n\n\nClick this icon to create a new branch. You can name it anything you like, but we recommend using your URL slug if possible (e.g. “blog-post-workflow” is the end of the URL for this webpage). Leave the box next to “Sync branch with remote” checked, as this will create your branch both locally and on our GitHub page:\n\n\n\nRStudio now displays the new branch in place of “master” to show that we’re working on the new branch, instead!\nCreate a new folder in \"_posts\"\nNow that you’ve created a new branch in the Git window, take a look at the File window.\n\n\n\nThe program we use to build the blog is called Distill, and it takes care of all the back-end work as long as we put every new blog post inside of a unique folder within the \"_posts\" directory. Opening \"_posts\", you can see that every post is contained within a time-stamped sub-folder:\n\n\n\nTo create one of these folders for your new post, enter the following command into R:\n\n\ndistill::create_post(\"Blog post workflow\")\n\n\n\nThis does two things: it creates the folder automatically (circled in red), and it opens a new RMarkdown file where you can begin writing your post (circled in green).\n\n\n\nIn red: notice the folder appears in both your File tab and your Git tab. (Don’t worry about the date on this folder - it’s for internal use and does not need to match the publication date.)\nIn green: this is the RMarkdown file where you’ll write your post.\nCheck out our Quick-start Guide for Blogging with RMarkdown!\nAs you’re writing your post, you can preview it as a fully formatted webpage by hitting the Knit button at the top of your RMarkdown file:\n\n\n\n\nYou can switch between previewing the page in the RStudio Viewer tab, or in your computer’s default web browser. Click the settings icon next to “Knit” for preview options.\nPut your data in a “data” folder!\nIf you’re working with a PMA data extract in your post put it in a sub-folder called data. Your editors will need a copy of your extract in order to render your post! For example, I would store the data and the ddi for this post like this:\n./_posts/2021-02-02-blog-post-workflow/data/pma_00008.dat.gz\n./_posts/2021-02-02-blog-post-workflow/data/pma_00008.xml\nIt’s OK to push your data to UMN Github! As long as you put it in a folder called data, admin will automatically remove it before posting the public version of the blog.\nPush your post to GitHub\nWhen you’re finished writing, follow these steps to share your post with the team on our Enterprise GitHub page (reminder: it won’t go “live” until Matt or postdocs merge your post to master and publishes it to the public GitHub page).\nPress the “Knit” button one more time to render a final HTML version of the page. (At this point, you may see a number of automatically created files related to your RMarkdown file in the Git tab.)\nNow, enter the following commands directly into the R console, but please adjust the brief commit “message” as necessary to describe your change!\n\n\ngert::git_add(\".\")\ngert::git_commit(\"Draft published: blog-post-workflow\")\ngert::git_push()\n\n\n\nNow, if you visit our Enterprise GitHub page, your post will appear in a new branch! (It will not yet appear on the copy of the blog we have posted there, which is rendered only from master.)\n\n\n\nEditors\nPull the author’s branch to your computer\nAny time that you want to review an author’s post, you’ll always need to get the latest copy of their branch from our Enterprise GitHub page. If this is the first time you’ve read a draft for the post, the author’s branch won’t yet be listed in RStudio.\n\n\n\n\nThis editor’s RStudio only knows about the “master” branch so far.\nThe Pull button in RStudio’s Git tab will gather information about all of the new branches on GitHub, and it will download a copy of each one onto your computer:\n\n\n\nClicking it will bring up a dialogue screen. RStudio reports that it discovered a new branch blog-post-workflow living at the remote repository origin.\n\n\n\nReturning to RStudio’s main window, notice that you can now toggle between the working on the remote master branch, or the new remote branch called blog-post-workflow. When you’re ready to edit the author’s post, use this menu to select their branch.\n\n\n\nRStudio automatically creates a local version of this branch on your computer, and it reports that your changes will be tracked and pushed to the remote branch of the same name.\n\n\n\nLocate and edit the new post\nNow, RStudio shows that you’re working on the author’s branch in the Git tab, and you’ll see their post listed in the _posts folder on the Files tab. Navigate to the .Rmd file for their post, then click it to begin making edits.\n\n\n\nCheck out our Quick-start Guide for Blogging with RMarkdown!\nAs you’re writing your post, you can preview it as a fully formatted webpage by hitting the Knit button at the top of your RMarkdown file:\n\n\n\n\nYou can switch between previewing the page in the RStudio Viewer tab, or in your computer’s default web browser. Click the settings icon next to “Knit” for preview options.\nPush the edited post back to GitHub\nWhen you’re finished editing, follow these steps to send the revised file back to GitHub. (Reminder: it won’t appear on the website until Matt or postdocs merge the post to master and publishes it to the public GitHub page).\nPress the “Knit” button one more time to render a final HTML version of the page. (At this point, you may see a number of automatically created files related to your RMarkdown file in the Git tab.)\nNow, enter the following commands directly into the R console, but please adjust the brief commit “message” as necessary to describe your change!\n\n\ngert::git_add(\".\")\ngert::git_commit(\"Draft edited: blog-post-workflow\")\ngert::git_push()\n\n\n\nNow, if you visit our Enterprise GitHub page, you’ll see that your edited files appear on the author’s branch. (They will not yet appear on the copy of the blog we have posted there, which is rendered only from master.)\n\n\n\nAll users: making revisions\nWhen you’ve finished pushing something to GitHub, please email your collaborators to let them know about next steps!\nTo get your collaborator’s latest updates from GitHub, you should launch the pma-data-hub RStudio project file called pma-data-hub.Rproj. If you forget to open the project file, RStudio will not be able to access the contents of your Git folder (it won’t know that there’s a GitHub repository for the project at all).\nWhen you open the project file, RStudio will again display a Git tab. Click on the Pull button to get your collaborator’s latest changes.\n\n\n\nSwitch from the master branch to the branch associated with your post:\n\n\n\nAfter you’re finished incorporating their feedback into the RMarkdown file (.Rmd), click Knit and then run these commands in Terminal again to send your work back to GitHub:\n\n\ngert::git_add(\".\")\ngert::git_commit(\"Draft complete: blog-post-workflow\")\ngert::git_push()\n\n\n\nPlease let Matt & postdocs know when your revisions are complete and ready to appear on the live blog!\nSite Admin\nThese instructions will introduce an additional remote to your local repository. Only use them if you’ll be involved with managing updates to the live blog (e.g. Matt & postdocs). All of these functions can be used the in RStudio Terminal.\nSetup\nBefore adding a second remote, it’s best to rename the UMN GitHub remote something like private. You can check the current name with:\ngit remote\nIf the UMN GitHub is still called origin (by default), rename it with:\ngit remote rename origin private\nLikewise, you should give the private branch master a different name, as the second remote will have a master branch, too. To see all of the remote branches currently in use:\ngit remote show private\nCheckout master and change its name to something like private-master:\ngit checkout master\ngit branch -m \"private-master\"\nNow, add the public remote and fetch its branches (there should only be one, called master):\ngit remote add public https://github.com/ipums/pma-data-hub\ngit fetch public\nCreate a local branch called public-master corresponding with master on the public remote:\ngit branch public-master public/master\nAt this point, you’ll notice that RStudio shows two remotes (with the branches you’ve fetched) and all of the local branches you’ve created so far.\n\n\n\n\nIn this example, we set the local “private-master” branch to track “master” on the private remote. The “public-master” branch tracks “master” on the public remote.\nCreate a Git Hook to remove data from the public repo\nWe should never push PMA data extracts to the public repository. Yet, we need to have these data available on the private repository in order to build each others’ posts when we want to review or merge new content.\nYou might imagine that the only way to do this would be to manually delete the data folder for each post just before we push something from our local version of public-master to the remote public/master. Luckily, git hooks offers a way to automatically delete any incoming data folder headed to a merge with public-master.\nSimply create a file at .git/hooks/post-merge containing the following code:\n#! /bin/sh\ngreen='\\033[0;32m'\nnc='\\033[0m'\n\n# Start from the repository root.\ncd ./$(git rev-parse --show-cdup)\n\n# Delete data files and empty directories.\nif [ `git rev-parse --abbrev-ref HEAD` == \"public-master\" ]; then\n  echo \"${green}Deleting data files...${nc}\"\n  find . -path '*/data/*' -delete\n  find . -type d -empty -delete\nfi\n\nThis will only delete data folders if a branch called public-master is currently checked out when we run git merge (see below). If you gave a different name to your local public branch, you’ll have to edit this code!\nYou also must make this file executable. For Mac OS users, you can do this by entering the following command into Terminal (assuming you’re already in the pma data hub directory):\nchmod +x .git/hooks/post-merge\nNow, when you follow the merging steps below, any file saved in a folder called data (including all sub-folders) will be deleted automatically.\nMerging\nOur main goal is to avoid creating divergent commit histories between the internal repository and the public repository. In practice, that means a typical workflow will involve these steps:\nSquash and Merge the author’s branch to private/master\nBuild, Commit, and Push to private/master\nMerge private/master to public/master\nPush to public/master\nOur authoring / editing workflow generates a commit each time someone adds a change to the branch for a new post (you can run git log on any branch to see its full commit history). We will squash and merge this commit history into a single commit on private-master.\nFor example, with a new post on the branch blog-post-workflow:\ngit checkout private-master\ngit merge --squash blog-post-workflow\nNow, in RStudio, hit the Build Website button. Look over the site to make sure everything looks good. (We won’t build on public-master to avoid merge conflicts, so get those edits in now.)\n\n\n\nWhen you’re ready, add all files and commit your changes with a message like:\ngit add .\ngit commit -m \"new post: blog-post-workflow\"\nAlthough your local branch has a different name, you can push your commit to master on the private remote with this command:\ngit push private HEAD:master\nWait a few minutes, and you’ll see that the GitHub Pages site hosted at UMN GitHub should update to reflect your changes.\nTo merge your private-master to public-master:\ngit checkout public-master\ngit merge --squash private-master -X theirs\ngit add .\ngit commit -m \"new post: blog-post-workflow\"\n(It’s good practice to squash commits to private-master, too, since we sometimes make quick-fixes there. The -X theirs part tells Git to defer to private-master over public-master in case there are any conflicts.)\nIf you’ve created a Git Hook to automatically delete any data folders (see above), you’re all set! If not, manually delete them now. Finally, push your changes to the live site:\ngit push public HEAD:master\nOther git tips\nNeed to rollback to a previous commit? Look for it in the git log, and do a hard reset:\ngit log\ngit reset --hard 58ba4f0396b985fb5ab82c88f7bbc5c9cc619e71\nFor a checklist of updated files and their commit status:\ngit status\nTo see a list of files with unresolved conflicts\ngit diff --name-only --diff-filter=U\nIf you ever need to force a push to GitHub (e.g. if you REALLY must overwrite a commit), you can do that with the force option:\ngit push -f \n\nYou can check its location by running “which git” in Terminal, and “git –version” to check the installed version. If git is somehow not installed, use the “Install git using Homebrew” instructions here↩︎\nMac users: type “which git” in terminal and enter the result; Windows users: look for git.exe (most likely in Program Files)↩︎\n",
      "last_modified": "2021-08-16T13:20:31-05:00"
    },
    {
      "path": "blogging-with-rmarkdown.html",
      "title": "Blogging with RMarkdown",
      "description": "Quick tips for authoring and editing blog posts with RMarkdown\n",
      "author": [
        {
          "name": "Matt Gunther",
          "url": {}
        }
      ],
      "date": "01-25-2021",
      "contents": "\n\nContents\nCreating a blog post\nYAML Metadata\nTitle\nDescription\nCategories\nAuthor\nDate\nOutput (Table of Contents)\nPreview\n\nCode chunks\nChunk options\nData Visualizations from chunks\n\nFormatted Text\nHeadings\nBold and Italics\nInline code (variable names, packages, functions, etc)\nHyperlinks\nAsides and Footnotes\n\n\nRMarkdown documents (.Rmd) work just like regular R scripts (.R) in that you can use them as a space to develop code before sending it to the R Console. The main difference is that an RMarkdown file breaks code into discrete “chunks” of code that can be separated by blocks of text. When you run an RMarkdown document, the Console ignores anything that’s not included in a code chunk (so there’s no need to use the comment indicator #).\nRMarkdown is a powerful tool for sharing and teaching R code, but it has become even more useful with the advent of packages like knitr, which can transform RMarkdown files into Word documents, PDFs, sideshows, HTML pages, and more. The PMA Data Hub is built with knitr and another package called distill, which transforms RMarkdown files into fully formatted blog posts.\nIf you’ve never used RMarkdown, knitr, or distill before, you’ll need to install them with your R Console now:\n\n\ninstall.packages(\"RMarkdown\")\ninstall.packages(\"knitr\")\ninstall.packages(\"distill\")\n\n\n\nCreating a blog post\nIn this post, we’ll assume that you’ve already reviewed the Blog Post Workflow, so you’re familiar with the process for creating a new blog post on a new branch of the Git repository.\nAssuming you’ve created a new branch for your post, you’ll create and open an RMarkdown file when you run:\n\n\ndistill::create_post(\"Getting started with RMarkdown\")\n\n\n\nAt this point, RStudio should look something like this:\n\n\n\n\nCircled in red: notice that a new folder was created in the \"_posts\" directory shown in the Files tab, and your new files also are now being tracked in the Git tab.\nAn RMarkdown file opens with a template showing a YAML metadata header, a code chunk called “setup”, and some boilerplate text.\nYAML Metadata\nYour RMarkdown template contains a header consisting of a series of key: \"value\" pairs written in YAML. This is where we store metadata for each article appearing both at 1) the top of every blog post, and 2) on the blog homepage.\nHere’s an example of a complete YAML header for a post on the Data Hub:\n\n\n\nTitle\nThis will be the main Title shown in CSS style H1 at the top of your post. We automatically reformat to all-caps, so this is not case-sensitive.\nPlease do not use sentence punctuation (unless your title is a question).\nEnsure that your Title matches the “H1 Title” on the Data Hub Tracking Sheet.\nDescription\nThis is the subtitle shown in CSS style H2 (just below the H1 Title). This subtitle is case-senstive.\nPlease do not use sentence punctuation (unless your subtitle is a question).\nTry your best to avoid repeating the subtitle pattern “How to X”. Subtitles should emphasize the importance of a post in the particular context of analyzing PMA data if possible.\nCategories\nThe are the “tags” that will help readers filter posts and navigate through different thematic modules. What tags should you include?\nModule name (Column A of the tracking sheet)\nPost type (Column B of the tracking sheet)\nImportant package functions (package::function) or techniques\nAnalysis tools\nAlways check to see if your tags have been used in a previous post and, if so, make sure to match their existing style, spelling, etc.\nAuthor\nAlways include your name and your affiliation with the project. Optionally, feel free to link to a personal website or social media account!\nExamples:\n\nauthor:\n  - first_name: \"Yihui\"\n    last_name: \"Xie\"\n    url: https://github.com/yihui\n    affiliation: RStudio\n    affiliation_url: https://www.rstudio.com\n    orcid_id: 0000-0003-0645-5666\n  - name: \"JJ Allaire\"\n    url: https://github.com/jjallaire\n    affiliation: RStudio\n    affiliation_url: https://www.rstudio.com\n  - name: \"Rich Iannone\"\n    url: https://github.com/rich-iannone\n    affiliation: RStudio\n    affiliation_url: https://www.rstudio.com\n\nDate\nAdmin will update this to reflect date of publication.\nOutput (Table of Contents)\nThe PMA Data Hub uses a floating table of contents that follows up to 3 heading depths. Please format exactly as shown:\n\n\noutput:\n  distill::distill_article:\n    self_contained: false\n    toc: true\n    toc_depth: 3\n    toc_float: true\n\n\n\nPreview\nThis is the image that will appear alongside your post in the blog homepage. If you don’t specify an image, distill will automatically select the first image in your post; if there are no images, the space will be left blank (but please consider using one!)\nThe file path to your image should be relative to the RMarkdown file, itself. For example:\n\n\n\nThis shows the folder “2020-12-09-mapping-contraceptive-stockouts” in the \"_posts\" folder. The .Rmd file lives in the top level of the folder, and the desired image Rlogo.png lives in the images subfolder. The correct way to reference the image is:\n\n\npreview: images/static-map.png\n\n\n\nCode chunks\nEach chunk of code in your RMarkdown file must be offset as shown here (note the tic-marks and “r” in curly brackets):\n\n\n\n\nThe “r” tells R to interpret this chunk as R code (RMarkdown also supports other languages like Python, Julia, C++, and SQL).\nYou can quickly insert a code chunk via the Code menu in RStudio’s menu bar, or by using the keyboard shortcut shown there (e.g. command + option + I for mac users).\nChunk options\nYou can set specific rendering instructions for RMarkdown inside the curly brackets. Some common options include:\n\nr, eval = F # don't run the code in this chunk\nr, echo = F # hide the code, but not the results \nr, eval = T, echo = F # combine options with commas like this\nr, error = F, message = F, warning = F # hide errors, messages, & warnings\n\nA full list of chunk options are explained here.\nYou can also set default options for all of your code chunks at the top of your RMarkdown document (see the setup chunk that opens in a new template):\n\n\nknitr::opts_chunk$set(\n  echo = TRUE, \n  eval = FALSE,\n  error = FALSE,\n  message = FALSE, \n  warning = FALSE\n)\n\n\n\nData Visualizations from chunks\nThe Distill website explains how to format figures, tables, and diagrams via code chunk arguments.\nFormatted Text\nHere, we’ll show some examples for adding formatted text to the body of your RMarkdown file (i.e. everything that not included in the YAML header or a code chunk).\nHeadings\nUse the # symbol once for an H1 heading, twice ## for an H2 heading, or three times ### for an H3 heading.\nLook at the table of contents for this page: H1 headings are left aligned, and H2 headings are indented once; any H3 headings would be indented twice if we had them.\nBold and Italics\nItalics are offset by one * like this:\n\n*Italics* are offset by one `*` like this:\n\nBold text is offset by two ** like this:\n\n**Bold** text is offset by two `**` like this:\n\nInline code (variable names, packages, functions, etc)\nWe use a particular font for code chunks, and this font also gets applied in the text body to any mention of a variable name, package, or function - basically anything that might appear in the console.\nNote: the first time you use a variable name, package, or function in a post, it’s usually best in include a hyperlink to the underlying documentation. When you insert a hyperlink, do not offset text for inline code.\nInline code is offset by one ` like this:\n\n`Inline code` is offset by one ` like this:\n\nHyperlinks\nA hyperlink should be used the first time you mention a variable, package, function, or anything else that has underlying documentation at an external source.\nA hyperlink can be inserted like this:\nA [hyperlink](http://bitly.com/98K8eH) can be inserted like this:\nIf you want to link to another page on the PMA Data Hub, use relative links (do not include the full path). For example:\nA relative path to the ABOUT page:\nA relative path to the [ABOUT](about.html) page:\nOr, a relative path to one of the blog posts:\nOr, a relative path to one of the [blog posts](posts/2020-12-09-mapping-contraceptive-stockouts/index.html)\nHere is a relative path to one of the headings on that blog post:\nHere is a relative path to one of the [headings](posts/2020-12-09-mapping-contraceptive-stockouts/index.html#shiny-application) on that blog post\nAsides and Footnotes\nAsides are designed for very brief comments rendered to the side of the text body. They must be offset with <aside> tags like this:\n<aside>\nFYI: formatted text in an \"aside\" must use <b>HTML tags<\/b>\n<\/aside>\n\nFYI: formatted text in an “aside” must use HTML tags\nAsides are associated with a particular paragraph or code chunk, so they will create white-space in the text body if they become longer than their partner! For longer comments, consider using a footnote.1\nInsert a footnote here^[This is my footnote]\n\nFootnotes appear as hover-text, and they also populate at the bottom of the page.↩︎\n",
      "last_modified": "2021-08-16T13:20:33-05:00"
    },
    {
      "path": "CODE_OF_CONDUCT.html",
      "title": "Contributor Covenant Code of Conduct",
      "description": "By contributing comments or posts to this blog, you agree to abide by the following code of conduct\n",
      "author": [],
      "contents": "\n\nContents\nOur Pledge\nOur Standards\nEnforcement Responsibilities\nScope\nEnforcement\nEnforcement Guidelines\n1. Correction\n2. Warning\n3. Temporary Ban\n4. Permanent Ban\n\n\nAttribution\n\nOur Pledge\nWe as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.\nWe pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.\nOur Standards\nExamples of behavior that contributes to a positive environment for our community include:\nDemonstrating empathy and kindness toward other people\nBeing respectful of differing opinions, viewpoints, and experiences\nGiving and gracefully accepting constructive feedback\nAccepting responsibility and apologizing to those affected by our mistakes, and learning from the experience\nFocusing on what is best not just for us as individuals, but for the overall community\nExamples of unacceptable behavior include:\nThe use of sexualized language or imagery, and sexual attention or advances of any kind\nTrolling, insulting or derogatory comments, and personal or political attacks\nPublic or private harassment\nPublishing others’ private information, such as a physical or email address, without their explicit permission\nOther conduct which could reasonably be considered inappropriate in a professional setting\nEnforcement Responsibilities\nCommunity leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.\nCommunity leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.\nScope\nThis Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.\nEnforcement\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at [INSERT CONTACT METHOD]. All complaints will be reviewed and investigated promptly and fairly.\nAll community leaders are obligated to respect the privacy and security of the reporter of any incident.\nEnforcement Guidelines\nCommunity leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:\n1. Correction\nCommunity Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.\nConsequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.\n2. Warning\nCommunity Impact: A violation through a single incident or series of actions.\nConsequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.\n3. Temporary Ban\nCommunity Impact: A serious violation of community standards, including sustained inappropriate behavior.\nConsequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.\n4. Permanent Ban\nCommunity Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.\nConsequence: A permanent ban from any sort of public interaction within the community.\nAttribution\nThis Code of Conduct is adapted from the Contributor Covenant, version 2.0, available at https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\nCommunity Impact Guidelines were inspired by Mozilla’s code of conduct enforcement ladder.\nFor answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https:// www.contributor-covenant.org/translations.\n\n\n\n",
      "last_modified": "2021-08-16T13:20:33-05:00"
    },
    {
      "path": "CONTRIBUTING.html",
      "title": "Contributing to the PMA Data Hub",
      "description": "How to write or propose a change to a post on this blog\n",
      "author": [],
      "contents": "\nComing soon!\n\n\n\n",
      "last_modified": "2021-08-16T13:20:34-05:00"
    },
    {
      "path": "index.html",
      "title": "Data Analysis Hub",
      "author": [],
      "contents": "\n\n\n\n",
      "last_modified": "2021-08-16T13:20:35-05:00"
    },
    {
      "path": "introduction.html",
      "title": "Introduction to IPUMS PMA Data Analysis",
      "author": [],
      "contents": "\n\n \n\nTrouble loading this page?\nYou may need to disable your ad-blocker or switch browsers.\n\n\n\n",
      "last_modified": "2021-08-16T13:20:35-05:00"
    },
    {
      "path": "LICENSE.html",
      "title": "License",
      "description": "All PMA Data Hub content is protected by the MPL version 2.0 license displayed below (unless otherwise noted). \n",
      "author": [],
      "contents": "\n\nContents\nMozilla Public License Version 2.0\n1. Definitions\n2. License Grants and Conditions\n3. Responsibilities\n4. Inability to Comply Due to Statute or Regulation\n5. Termination\n6. Disclaimer of Warranty\n7. Limitation of Liability\n8. Litigation\n9. Miscellaneous\n10. Versions of the License\nExhibit A - Source Code Form License Notice\nExhibit B - “Incompatible With Secondary Licenses” Notice\n\n\nMozilla Public License Version 2.0\n1. Definitions\n1.1. “Contributor” means each individual or legal entity that creates, contributes to the creation of, or owns Covered Software.\n1.2. “Contributor Version” means the combination of the Contributions of others (if any) used by a Contributor and that particular Contributor’s Contribution.\n1.3. “Contribution” means Covered Software of a particular Contributor.\n1.4. “Covered Software” means Source Code Form to which the initial Contributor has attached the notice in Exhibit A, the Executable Form of such Source Code Form, and Modifications of such Source Code Form, in each case including portions thereof.\n1.5. “Incompatible With Secondary Licenses” means\n(a) that the initial Contributor has attached the notice described\n    in Exhibit B to the Covered Software; or\n\n(b) that the Covered Software was made available under the terms of\n    version 1.1 or earlier of the License, but not also under the\n    terms of a Secondary License.\n1.6. “Executable Form” means any form of the work other than Source Code Form.\n1.7. “Larger Work” means a work that combines Covered Software with other material, in a separate file or files, that is not Covered Software.\n1.8. “License” means this document.\n1.9. “Licensable” means having the right to grant, to the maximum extent possible, whether at the time of the initial grant or subsequently, any and all of the rights conveyed by this License.\n1.10. “Modifications” means any of the following:\n(a) any file in Source Code Form that results from an addition to,\n    deletion from, or modification of the contents of Covered\n    Software; or\n\n(b) any new file in Source Code Form that contains any Covered\n    Software.\n1.11. “Patent Claims” of a Contributor means any patent claim(s), including without limitation, method, process, and apparatus claims, in any patent Licensable by such Contributor that would be infringed, but for the grant of the License, by the making, using, selling, offering for sale, having made, import, or transfer of either its Contributions or its Contributor Version.\n1.12. “Secondary License” means either the GNU General Public License, Version 2.0, the GNU Lesser General Public License, Version 2.1, the GNU Affero General Public License, Version 3.0, or any later versions of those licenses.\n1.13. “Source Code Form” means the form of the work preferred for making modifications.\n1.14. “You” (or “Your”) means an individual or a legal entity exercising rights under this License. For legal entities, “You” includes any entity that controls, is controlled by, or is under common control with You. For purposes of this definition, “control” means (a) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (b) ownership of more than fifty percent (50%) of the outstanding shares or beneficial ownership of such entity.\n2. License Grants and Conditions\n2.1. Grants\nEach Contributor hereby grants You a world-wide, royalty-free, non-exclusive license:\nunder intellectual property rights (other than patent or trademark) Licensable by such Contributor to use, reproduce, make available, modify, display, perform, distribute, and otherwise exploit its Contributions, either on an unmodified basis, with Modifications, or as part of a Larger Work; and\nunder Patent Claims of such Contributor to make, use, sell, offer for sale, have made, import, and otherwise transfer either its Contributions or its Contributor Version.\n2.2. Effective Date\nThe licenses granted in Section 2.1 with respect to any Contribution become effective for each Contribution on the date the Contributor first distributes such Contribution.\n2.3. Limitations on Grant Scope\nThe licenses granted in this Section 2 are the only rights granted under this License. No additional rights or licenses will be implied from the distribution or licensing of Covered Software under this License. Notwithstanding Section 2.1(b) above, no patent license is granted by a Contributor:\nfor any code that a Contributor has removed from Covered Software; or\nfor infringements caused by: (i) Your and any other third party’s modifications of Covered Software, or (ii) the combination of its Contributions with other software (except as part of its Contributor Version); or\nunder Patent Claims infringed by Covered Software in the absence of its Contributions.\nThis License does not grant any rights in the trademarks, service marks, or logos of any Contributor (except as may be necessary to comply with the notice requirements in Section 3.4).\n2.4. Subsequent Licenses\nNo Contributor makes additional grants as a result of Your choice to distribute the Covered Software under a subsequent version of this License (see Section 10.2) or under the terms of a Secondary License (if permitted under the terms of Section 3.3).\n2.5. Representation\nEach Contributor represents that the Contributor believes its Contributions are its original creation(s) or it has sufficient rights to grant the rights to its Contributions conveyed by this License.\n2.6. Fair Use\nThis License is not intended to limit any rights You have under applicable copyright doctrines of fair use, fair dealing, or other equivalents.\n2.7. Conditions\nSections 3.1, 3.2, 3.3, and 3.4 are conditions of the licenses granted in Section 2.1.\n3. Responsibilities\n3.1. Distribution of Source Form\nAll distribution of Covered Software in Source Code Form, including any Modifications that You create or to which You contribute, must be under the terms of this License. You must inform recipients that the Source Code Form of the Covered Software is governed by the terms of this License, and how they can obtain a copy of this License. You may not attempt to alter or restrict the recipients’ rights in the Source Code Form.\n3.2. Distribution of Executable Form\nIf You distribute Covered Software in Executable Form then:\nsuch Covered Software must also be made available in Source Code Form, as described in Section 3.1, and You must inform recipients of the Executable Form how they can obtain a copy of such Source Code Form by reasonable means in a timely manner, at a charge no more than the cost of distribution to the recipient; and\nYou may distribute such Executable Form under the terms of this License, or sublicense it under different terms, provided that the license for the Executable Form does not attempt to limit or alter the recipients’ rights in the Source Code Form under this License.\n3.3. Distribution of a Larger Work\nYou may create and distribute a Larger Work under terms of Your choice, provided that You also comply with the requirements of this License for the Covered Software. If the Larger Work is a combination of Covered Software with a work governed by one or more Secondary Licenses, and the Covered Software is not Incompatible With Secondary Licenses, this License permits You to additionally distribute such Covered Software under the terms of such Secondary License(s), so that the recipient of the Larger Work may, at their option, further distribute the Covered Software under the terms of either this License or such Secondary License(s).\n3.4. Notices\nYou may not remove or alter the substance of any license notices (including copyright notices, patent notices, disclaimers of warranty, or limitations of liability) contained within the Source Code Form of the Covered Software, except that You may alter any license notices to the extent required to remedy known factual inaccuracies.\n3.5. Application of Additional Terms\nYou may choose to offer, and to charge a fee for, warranty, support, indemnity or liability obligations to one or more recipients of Covered Software. However, You may do so only on Your own behalf, and not on behalf of any Contributor. You must make it absolutely clear that any such warranty, support, indemnity, or liability obligation is offered by You alone, and You hereby agree to indemnify every Contributor for any liability incurred by such Contributor as a result of warranty, support, indemnity or liability terms You offer. You may include additional disclaimers of warranty and limitations of liability specific to any jurisdiction.\n4. Inability to Comply Due to Statute or Regulation\nIf it is impossible for You to comply with any of the terms of this License with respect to some or all of the Covered Software due to statute, judicial order, or regulation then You must: (a) comply with the terms of this License to the maximum extent possible; and (b) describe the limitations and the code they affect. Such description must be placed in a text file included with all distributions of the Covered Software under this License. Except to the extent prohibited by statute or regulation, such description must be sufficiently detailed for a recipient of ordinary skill to be able to understand it.\n5. Termination\n5.1. The rights granted under this License will terminate automatically if You fail to comply with any of its terms. However, if You become compliant, then the rights granted under this License from a particular Contributor are reinstated (a) provisionally, unless and until such Contributor explicitly and finally terminates Your grants, and (b) on an ongoing basis, if such Contributor fails to notify You of the non-compliance by some reasonable means prior to 60 days after You have come back into compliance. Moreover, Your grants from a particular Contributor are reinstated on an ongoing basis if such Contributor notifies You of the non-compliance by some reasonable means, this is the first time You have received notice of non-compliance with this License from such Contributor, and You become compliant prior to 30 days after Your receipt of the notice.\n5.2. If You initiate litigation against any entity by asserting a patent infringement claim (excluding declaratory judgment actions, counter-claims, and cross-claims) alleging that a Contributor Version directly or indirectly infringes any patent, then the rights granted to You by any and all Contributors for the Covered Software under Section 2.1 of this License shall terminate.\n5.3. In the event of termination under Sections 5.1 or 5.2 above, all end user license agreements (excluding distributors and resellers) which have been validly granted by You or Your distributors under this License prior to termination shall survive termination.\n6. Disclaimer of Warranty\nCovered Software is provided under this License on an “as is”\nbasis, without warranty of any kind, either expressed, implied, or\nstatutory, including, without limitation, warranties that the\nCovered Software is free of defects, merchantable, fit for a\nparticular purpose or non-infringing. The entire risk as to the\nquality and performance of the Covered Software is with You.\nShould any Covered Software prove defective in any respect, You\n(not any Contributor) assume the cost of any necessary servicing,\nrepair, or correction. This disclaimer of warranty constitutes an\nessential part of this License. No use of any Covered Software is\nauthorized under this License except under this disclaimer.\n7. Limitation of Liability\nUnder no circumstances and under no legal theory, whether tort\n(including negligence), contract, or otherwise, shall any\nContributor, or anyone who distributes Covered Software as\npermitted above, be liable to You for any direct, indirect,\nspecial, incidental, or consequential damages of any character\nincluding, without limitation, damages for lost profits, loss of\ngoodwill, work stoppage, computer failure or malfunction, or any\nand all other commercial damages or losses, even if such party\nshall have been informed of the possibility of such damages. This\nlimitation of liability shall not apply to liability for death or\npersonal injury resulting from such party’s negligence to the\nextent applicable law prohibits such limitation. Some\njurisdictions do not allow the exclusion or limitation of\nincidental or consequential damages, so this exclusion and\nlimitation may not apply to You.\n8. Litigation\nAny litigation relating to this License may be brought only in the courts of a jurisdiction where the defendant maintains its principal place of business and such litigation shall be governed by laws of that jurisdiction, without reference to its conflict-of-law provisions. Nothing in this Section shall prevent a party’s ability to bring cross-claims or counter-claims.\n9. Miscellaneous\nThis License represents the complete agreement concerning the subject matter hereof. If any provision of this License is held to be unenforceable, such provision shall be reformed only to the extent necessary to make it enforceable. Any law or regulation which provides that the language of a contract shall be construed against the drafter shall not be used to construe this License against a Contributor.\n10. Versions of the License\n10.1. New Versions\nMozilla Foundation is the license steward. Except as provided in Section 10.3, no one other than the license steward has the right to modify or publish new versions of this License. Each version will be given a distinguishing version number.\n10.2. Effect of New Versions\nYou may distribute the Covered Software under the terms of the version of the License under which You originally received the Covered Software, or under the terms of any subsequent version published by the license steward.\n10.3. Modified Versions\nIf you create software not governed by this License, and you want to create a new license for such software, you may create and use a modified version of this License if you rename the license and remove any references to the name of the license steward (except to note that such modified license differs from this License).\n10.4. Distributing Source Code Form that is Incompatible With Secondary Licenses\nIf You choose to distribute Source Code Form that is Incompatible With Secondary Licenses under the terms of this version of the License, the notice described in Exhibit B of this License must be attached.\nExhibit A - Source Code Form License Notice\nThis Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at http://mozilla.org/MPL/2.0/.\nIf it is not possible or desirable to put the notice in a particular file, then You may include the notice in a location (such as a LICENSE file in a relevant directory) where a recipient would be likely to look for such a notice.\nYou may add additional accurate notices of copyright ownership.\nExhibit B - “Incompatible With Secondary Licenses” Notice\nThis Source Code Form is “Incompatible With Secondary Licenses”, as defined by the Mozilla Public License, v. 2.0.\n\n\n\n",
      "last_modified": "2021-08-16T13:20:36-05:00"
    }
  ],
  "collections": ["posts/posts.json"]
}
